@page "/"
@inject ISnackbar Snackbar
@inject Extensions.LiveUpdateService LiveUpdateService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 d-flex flex-column align-center">
    <!-- Top Row Cards -->
    <MudGrid Justify="Justify.Center" Style="width: 100%;">
        <MudItem xs="12" sm="6" md="2" Style="flex-grow: 1;">
            <MudCard Elevation="3" Class="animatedClass rounded-lg h-100">
                <MudCardContent Class="animatedClass d-flex flex-column justify-center text-wrap text-break">
                    <div class="d-flex align-items-center">
                        <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Thermostat" Color="Color.Primary" />
                        <MudText Typo="Typo.subtitle1" Class="ml-2text-center">Temperatur</MudText>
                    </div>
                    <MudText Typo="Typo.h5" Color="@GetTemperatureColor(currentTemperature)" Class="text-center">@currentTemperature°C</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <!-- humidity card -->
        <MudItem xs="12" sm="6" md="2" Style="flex-grow: 1;">
            <MudCard Elevation="3" Class="rounded-lg h-100">
                <MudCardContent Class="d-flex flex-column justify-center text-wrap text-break">
                    <div class="d-flex align-items-center">
                        <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.WaterDrop" Color="Color.Primary" />
                        <MudText Typo="Typo.subtitle1" Class="ml-2text-center">Luftfeuchtigkeit</MudText>
                    </div>
                    <MudText Typo="Typo.h5" Color="@GetHumidityColor(currentHumidity)" Class="text-center">@currentHumidity%</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <!-- Pressure card -->
        <MudItem xs="12" sm="6" md="2" Style="flex-grow: 1;">
            <MudCard Elevation="3" Class="rounded-lg h-100">
                <MudCardContent Class="d-flex flex-column justify-center text-wrap text-break">
                    <div class="d-flex align-items-center">
                        <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Speed" Color="Color.Primary" />
                        <MudText Typo="Typo.subtitle1" Class="ml-2 text-center">Luftdruck</MudText>
                    </div>
                    <MudText Typo="Typo.h5" Color="@GetPressureColor(currentPressure)" Class="text-center">@currentPressure hPa</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <!-- air quality card -->
        <MudItem xs="12" sm="6" md="2" Style="flex-grow: 1;">
            <MudCard Elevation="3" Class="rounded-lg h-100">
                <MudCardContent Class="d-flex flex-column justify-center text-wrap text-break">
                    <div class="d-flex align-items-center">
                        <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Masks" Color="Color.Primary" />
                        <MudText Typo="Typo.subtitle1" Class="ml-2 text-center">Luftqualität</MudText>
                    </div>
                    <MudText Typo="Typo.h5" Color="@GetAirQualityColor(currentAirQuality)" Class="text-center">@currentAirQuality AQI</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <!-- day/night  card -->
        <MudItem xs="12" sm="6" md="2" Style="flex-grow: 1;">
            <MudCard Elevation="3" Class="rounded-lg h-100">
                <MudCardContent Class="d-flex flex-column justify-center text-wrap text-break">
                    <div class="d-flex align-items-center">
                        <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Brightness6" Color="Color.Primary" />
                        <MudText Typo="Typo.subtitle1" Class="ml-2 text-center">Tag-Nacht Zeit</MudText>
                        <MudIcon Size="Size.Medium" Icon="@GetDayNightIcon(dayTimeStatus)" Color="Color.Primary" Class="ml-auto" />
                    </div>
                    <MudText Typo="Typo.h6" Class="text-center">@currentDateTime</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Charts and Gauges Section -->
    <MudGrid Class="mt-4" Style="width: 100%;" Justify="Justify.Center">
        <!-- Charts -->
        <MudItem xs="12" md="8">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudCard Elevation="3" Class="rounded-lg">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6" Class="mx-auto">Temperatur Chart</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudChart ChartType="ChartType.Line" ChartSeries="@temperatureSeries" XAxisLabels="@hourLabels" Width="100%" Height="100%">
                                <CustomGraphics>
                                </CustomGraphics>
                            </MudChart>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCard Elevation="3" Class="rounded-lg">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6" Class="mx-auto">Luftfeuchtigkeit Chart</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudChart ChartType="ChartType.Line" ChartSeries="@humiditySeries" XAxisLabels="@hourLabels" Width="100%" Height="100%">
                                <CustomGraphics>
                                </CustomGraphics>
                            </MudChart>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCard Elevation="3" Class="rounded-lg">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6" Class="mx-auto">Luftdruck Chart</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudChart ChartType="ChartType.Line" ChartSeries="@pressureSeries" XAxisLabels="@hourLabels" Width="100%" Height="100%">
                                <CustomGraphics>
                                </CustomGraphics>
                            </MudChart>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCard Elevation="3" Class="rounded-lg">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6" Class="mx-auto">Luftqualität Chart</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudChart ChartType="ChartType.Line" ChartSeries="@airQualitySeries" XAxisLabels="@hourLabels" Width="100%" Height="100%">
                                <CustomGraphics>
                                </CustomGraphics>
                            </MudChart>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudContainer>
@code {
    // Current values
    private double currentTemperature => LiveUpdateService.UpdateTemp;
    private int currentHumidity { get; set; } = 45;
    private int currentPressure { get; set; } = 1013;
    private int currentAirQuality { get; set; } = 35;
    private int dayTimeStatus { get; set; } = 800;
    private string currentDateTime { get; set; } = DateTime.Now.ToString("HH:mm:ss dd.MM.yyyy");

    // Chart data
    private string[] hourLabels = new string[]
    {
    "00:00", "01:00", "02:00", "03:00", "04:00",
    "05:00", "06:00", "07:00", "08:00", "09:00",
    "10:00", "11:00", "12:00", "13:00", "14:00",
    "15:00", "16:00", "17:00", "18:00", "19:00",
    "20:00", "21:00", "22:00", "23:00"
    };
    private List<ChartSeries> temperatureSeries = new List<ChartSeries>();
    private List<ChartSeries> humiditySeries = new List<ChartSeries>();
    private List<ChartSeries> pressureSeries = new List<ChartSeries>();
    private List<ChartSeries> airQualitySeries = new List<ChartSeries>();

    protected override void OnInitialized()
    {
        
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){

        }
        currentDateTime = DateTime.Now.ToString("HH:mm:ss dd.MM.yyyy"); StateHasChanged();
    }

    private void UpdateData()
    {
        // Check if any values are in danger zone and show notification
        if (IsTemperatureDangerous(currentTemperature) ||
            IsHumidityDangerous(currentHumidity) ||
            IsAirQualityDangerous(currentAirQuality))
        { }

        // Force UI update
        InvokeAsync(StateHasChanged);
    }
    private string GetDayNightIcon(int value){
        //very dark (Night, moonloight)
        if (value > 0 && value < 50)
        {
            return Icons.Material.Filled.NightsStay;
        }
        // Low Light (early morning or cloudy day)
        else if (value > 50 && value < 200)
        {
            return Icons.Material.Filled.Star;
        }
        //Moderate Light ( room lighting, dim cloudy day)
        else if (value > 200 && value < 500)
        {
            return Icons.Material.Filled.Cloud;
        }
        //Bright Light (Sunny day) burn! 
        else
        {
            return Icons.Material.Filled.WbSunny;
        }

    }

    // Helper methods for color coding
    private Color GetTemperatureColor(double temp)
    {
        if (temp < 18 || temp > 31) return Color.Error;
        if (temp < 20 || temp > 25) return Color.Warning;
        return Color.Success;
    }

    private Color GetHumidityColor(int humidity)
    {
        if (humidity < 30 || humidity > 70) return Color.Error;
        if (humidity < 40 || humidity > 60) return Color.Warning;
        return Color.Success;
    }

    private Color GetPressureColor(int pressure)
    {
        if (pressure < 1000 || pressure > 1025) return Color.Warning;
        return Color.Default;
    }

    private Color GetAirQualityColor(int aqi)
    {
        if (aqi > 75) return Color.Error;
        if (aqi > 50) return Color.Warning;
        return Color.Success;
    }


    // Danger checks
    private bool IsTemperatureDangerous(double temp)
    {
        return temp < 15 || temp > 35;
    }

    private bool IsHumidityDangerous(int humidity)
    {
        return humidity < 20 || humidity > 80;
    }

    private bool IsAirQualityDangerous(int aqi)
    {
        return aqi > 75;
    }
}